<!DOCTYPE html>

<!-- DO NOT MODIFY THIS FILE -->

<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">

  <!-- xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx -->
  <!--      SPX GRAPHICS CONTROLLER      -->
  <!--     ¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨    -->
  <!--         (c) 2020- SmartPX         -->
  <!--          http://spxgc.com         -->
  <!--                                   -->
  <!-- xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx -->

  <!--
    Scripts, no frameworks.
    "Some extract of vanilla, enough to feed Godzilla."
  -->

    <script src="./js/socket.io.js"></script>


  <title>SPX Renderer</title>
        <style>
            * {
                box-sizing: border-box;
                overflow: hidden;
                margin: 0;
                padding: 0px;
            }

            body, html {
                margin: 0;
                padding: 0px;
                background-color: transparent;
                background-color: rgba(0,0,0,0);
            }

            #root {
                padding: 0px;
                /* renderer size set by SPX to {{width}}x{{height}} */ 
                width: {{width}}px;
                height: {{height}}px;
                position: relative;
                border: 0px dashed red;
                background-size: 100% 100%;
                background-color: rgba(0,0,0,0);
            }

            .frame {
                margin: 0;
                width: 100%;
                height: 100%;
                padding: 0px;
                position: absolute;
                border: 0px solid red;
            }

            .debugMessage{
                top: 5%;
                left: 10%;
                opacity: 0.0;
                z-index: 500;
                font-size: 2em;
                font-weight: bold;
                position: absolute;
                padding: 0.1em 0.5em;
                display: inline-block;
                color: rgb(3, 42, 3);
                transform: rotate(1deg);
                border: 1px solid green;
                background-color: rgba(205, 255, 218, 0.85);
                font-family: 'Courier New', Courier, monospace;
            }

        </style>
</head>

 <body>
    <div id="root">
        <iframe class="frame f01" id="layer1"  style="z-index: 101;" src="/templates/empty.html"></iframe>
        <iframe class="frame f02" id="layer2"  style="z-index: 102;" src="/templates/empty.html"></iframe>
        <iframe class="frame f03" id="layer3"  style="z-index: 103;" src="/templates/empty.html"></iframe>
        <iframe class="frame f04" id="layer4"  style="z-index: 104;" src="/templates/empty.html"></iframe>
        <iframe class="frame f05" id="layer5"  style="z-index: 105;" src="/templates/empty.html"></iframe>
        <iframe class="frame f06" id="layer6"  style="z-index: 106;" src="/templates/empty.html"></iframe>
        <iframe class="frame f07" id="layer7"  style="z-index: 107;" src="/templates/empty.html"></iframe>
        <iframe class="frame f08" id="layer8"  style="z-index: 108;" src="/templates/empty.html"></iframe>
        <iframe class="frame f09" id="layer9"  style="z-index: 109;" src="/templates/empty.html"></iframe>
        <iframe class="frame f10" id="layer10" style="z-index: 110;" src="/templates/empty.html"></iframe>
        <iframe class="frame f11" id="layer11" style="z-index: 111;" src="/templates/empty.html"></iframe>
        <iframe class="frame f12" id="layer12" style="z-index: 112;" src="/templates/empty.html"></iframe>
        <iframe class="frame f13" id="layer13" style="z-index: 113;" src="/templates/empty.html"></iframe>
        <iframe class="frame f14" id="layer14" style="z-index: 114;" src="/templates/empty.html"></iframe>
        <iframe class="frame f15" id="layer15" style="z-index: 115;" src="/templates/empty.html"></iframe>
        <iframe class="frame f16" id="layer16" style="z-index: 116;" src="/templates/empty.html"></iframe>
        <iframe class="frame f17" id="layer17" style="z-index: 117;" src="/templates/empty.html"></iframe>
        <iframe class="frame f18" id="layer18" style="z-index: 118;" src="/templates/empty.html"></iframe>
        <iframe class="frame f19" id="layer19" style="z-index: 119;" src="/templates/empty.html"></iframe>
        <iframe class="frame f20" id="layer20" style="z-index: 120;" src="/templates/empty.html"></iframe>
    </div>
    <div class="debugMessage" id="debugMessage" style="opacity:0; position: absolute; z-index:1000;"></div>

    <script>

        let incomingData; // a placeholder for templateData

        function allowLayerControl(LayerNro) {
            // Usage:
            // http://localhost:5656/renderer/?layers=[2,4,20]
            // Check if use is limited to certain layers only.
            // Can control which layers renders on which renderer,
            // like web conference: participant 1 = layer 1
            //   true = allow control
            //   false = do not allow control
            // 1.0.12 fixes issue #32

            // Added in 1.1.0 a check to skip command if
            // a) window is in preview mode, but request is missing required preview flag
            // b) window is in program mode, but request has the preview flag
            let playMode = incomingData.playmode || 'notFoundSoMustBeProgramCommand' ;
            if ( isPreviewMode() && playMode != 'preview') {
                // Do not play previews in program
                return false;
            }

            if ( !isPreviewMode() && playMode == 'preview') {
                // Do not play programs in preview
                return false;
            }

            const queryString   = window.location.search;
            const urlParams     = new URLSearchParams(queryString);
            const limitLayers   = urlParams.get('layers');
            if (limitLayers) {
                const limitItems   = limitLayers.replace("[","").replace("]","").replace(" ", "").split(","); 
                if ( limitItems.includes(LayerNro) ) {
                    // console.log('Commands to layer ' + LayerNro + ' allowed.');
                    return true;
                } else {
                    console.log('Commands to layer ' + LayerNro + ' prevented.');
                    return false;
                }
            } else {
                return true
            }
        }

        function validateLayerNro(LayerNro) {
            // Added in 1.1.0 to add a preview functionality to renderer
            // If renderer is in ?preview=true mode AND layer is within the valid layer rage, then layer is always 1

            if (!allowLayerControl(LayerNro)) {
                // not allowed
                return false
            }

            if ( isPreviewMode() ) {
                return 1 // hardcoded LayerNro for previews!
            } else {
                return LayerNro
            }
        }

        function isPreviewMode() {
            const url = new URL(window.location.href);
            let previewFlag = url.searchParams.get('preview') || '';
            let previewPage = url.pathname || '';
            if ( previewFlag == 'true' || previewPage.includes('preview') ) {
                // console.log('Yes, this is a preview window');
                return true
            } else {
                // console.log('Nope, not a preview window');
                return false
            }
        }

        function clearLayer(LayerNro){
            // console.log('clearLayer ' + LayerNro);
            // if (!allowLayerControl(LayerNro)) return; // check layer param
            LayerNro = validateLayerNro(LayerNro);
            if (!LayerNro) { return }

            populateLayer(LayerNro,'');
        }

        function echo(msg) {
            document.getElementById('debugMessage').innerText=msg;
        }
        
        function protocolCheck() {
            // check if we are http or file.
            let protocol = location.protocol;
            if (protocol != "http:" && protocol != "https:") {
                alert('Please use this via server! Functions and CORS may not work when used as a file. (Current protocol: ' + protocol + ')');
            }

            // Resize window according to resolution
            const root = document.getElementById('root');
            const style = getComputedStyle(root)
            const w = style.width.replace('px','');
            const h = style.height.replace('px','');
            // console.log('Resizing window to ' + w + ' x ' + h + ' px.')
            window.resizeTo(w, h);

        }
            
        function remoteFunction(LayerNro, functionName, arg) {
            // console.log('remoteFunction ' + LayerNro);
            // LayerNro = validateLayerNro(LayerNro);
            LayerNro = validateLayerNro(LayerNro);
            if (!LayerNro) { return }
            let iframe = 'layer' + LayerNro;
            document.getElementById(iframe).contentWindow.echo(arg);
        }

        function populateLayer(LayerNro,TemplateFileRef='') {
            // console.log('populateLayer ' + LayerNro);
            // if (!allowLayerControl(LayerNro)) return; // check layer param
            LayerNro = validateLayerNro(LayerNro);
            if (!LayerNro) { return }
            let iframe = 'layer' + LayerNro;
            let templa = '';

            if (TemplateFileRef!='') {
                templa = TemplateRoot + TemplateFileRef;
            } else {
                templa = TemplateRoot + 'empty.html';
            }
            let ranNro = (new Date()).getTime() + Math.floor(Math.random() * 1000000);
            document.getElementById(iframe).src=templa + "?random=" + ranNro;
        }

        function playLayer(LayerNro,fieldData) {
            // console.log('playLayer ' + LayerNro);
            // if (!allowLayerControl(LayerNro)) return; // check layer param
            LayerNro = validateLayerNro(LayerNro);
            if (!LayerNro) { return }
            let iframeID = 'layer' + LayerNro;
            let formattedJSON = formatJSONAndSetDomFields(fieldData, iframeID);
            document.getElementById(iframeID).contentWindow.update(formattedJSON); 
            document.getElementById(iframeID).contentWindow.play();
        }

        function formatJSONAndSetDomFields(fieldData, iframeID) {
            let formattedJsonOut = {};
            if (fieldData) {
                var keys = [];
                for (var k in fieldData) keys.push(k);
                fieldData.forEach((item,index) => {
                    let KEY = Object.keys(item)[0];
                    let VAL = fieldData[index][Object.keys(item)[0]]
                    formattedJsonOut[KEY]=VAL;
                    let e = document.getElementById(iframeID).contentWindow.document.getElementById(KEY);
                    if (e) {
                        e.innerHTML=VAL;
                    }
                });
                return JSON.stringify(formattedJsonOut)
            }
    }

        function updateLayer(LayerNro,fieldData) {
            // console.log('updateLayer ' + LayerNro);
            // if (!allowLayerControl(LayerNro)) return; // check layer param
            // LayerNro = validateLayerNro(LayerNro);
            LayerNro = validateLayerNro(LayerNro);
            if (!LayerNro) { return }
            let iframeID = 'layer' + LayerNro;
            let formattedJSON = formatJSONAndSetDomFields(fieldData,iframeID);
            document.getElementById(iframeID).contentWindow.update(formattedJSON);
        }

        function stopLayer(LayerNro) {
            // console.log('stopLayer ' + LayerNro);
            if (!allowLayerControl(LayerNro)) return; // check layer param
            LayerNro = validateLayerNro(LayerNro);
            let iframeID = 'layer' + LayerNro;
            document.getElementById(iframeID).contentWindow.stop();
        }

        // init communications
        var url_string = window.location.href; // "http://www.example.com/index.html?gc=http://192.168.1.44:5656"; 
        var url = new URL(url_string);
        let TemplateRoot;
        var GCserver = url.searchParams.get("gc") || undefined;
        if (GCserver==undefined) {
            // The 'templates' is a subfolder in MEDIA, which is 
            // routed as static! At least during dev.
            TemplateRoot = "/templates/";
            console.log('Local comms using [' + TemplateRoot + '].');
            var socket = io();
        } else {
            TemplateRoot = "templates/";
            console.log('Remote comms ' + GCserver + ' using [' + TemplateRoot + '].');
            var socket = io(GCserver);
        }

        socket.on('connect', function () {
            data={};
            data.name   = 'SPX_RENDERER'; // <---- Name of this socket connection
            data.spxcmd = 'identifyClient';
            socket.emit('SPXMessage2Server', data);
        });

        socket.on('SPXMessage2Client', function (data) {
            // Handles messages coming from server to this client.
            // All comms using 'SPXMessage2Client' as a conduit with data object and
            // data.spxcmd as function identifier. Additional object values are payload.
            // console.log('SPXMessage2Client ' + JSON.stringify(data));

            incomingData = data;
            let LayerNro;

            switch (data.spxcmd) {
                case 'clearAllLayers':
                    // first we hide root, then clear all layers and show root again
                    document.getElementById('root').style.opacity=0;
                    document.querySelectorAll('.frame').forEach(function(frame,index) {
                        LayerNro = (index+1);
                        // console.log('Clearing layer ' + layerNro); // 1 based, not 0!
                        clearLayer(LayerNro,'');
                    });
                    document.getElementById('root').style.opacity=1;
                    break;

                case 'clearLayer':
                    clearLayer(data.layerno);
                    break;

                case 'loadTemplate':
                    populateLayer(data.webplayout,data.relpath);
                    break;

                case 'playTemplate':
                    // set callback function to the iframe and then load src to it.
                    // Note, for preview the layer number will be set downstream in the renderer is 'preview=true'
                    LayerNro = validateLayerNro(data.webplayout);
                    if (!LayerNro) { return }
                    document.getElementById('layer' + LayerNro).onload = function() { playLayer(LayerNro,data.fields); };
                    populateLayer(data.webplayout,data.relpath);
                    break;

                case 'nextTemplate':
                    // set callback function to the iframe and then load src to it.
                    // if (!allowLayerControl(data.webplayout)) return; // check layer param
                    LayerNro = validateLayerNro(data.webplayout);
                    if (!LayerNro) { return }
                    document.getElementById('layer' + LayerNro).contentWindow.next();
                    break;

                case 'updateTemplate':
                    setTimeout(function(){ updateLayer(data.webplayout,data.fields); }, 10);
                    break;

                case 'stopTemplate':
                    LayerNro = validateLayerNro(data.webplayout);
                    if (!LayerNro) { return }
                    document.getElementById('layer' + LayerNro).contentWindow.stop();
                    break;

                case 'invokeFunction':
                    LayerNro = validateLayerNro(data.webplayout);
                    if (!LayerNro) { return }
                    eval("document.getElementById('layer' + " + LayerNro + ").contentWindow." + data.invoke);
                    break;

                case 'setRendererBackgroundImage':
                    // Added in 1.0.15. This function will be called everytime
                    // a project is loaded in the controller. This changes the
                    // renderer root background image
                    if (data.background != '' ) {
                        // console.log('Background to [' + data.background + ']');
                        document.getElementById('root').style.backgroundImage = 'url(/' + data.background + ')';
                    } else {
                        // console.log('Background to transparent');
                        document.getElementById('root').style.backgroundImage = '';
                    }
                    break;

                default:
                    // console.log('Unknown SPXMessage2Client command in renderer: ' + data.spxcmd);
            }
        });

        socket.on('SPXWebRendererMessage', function (data) {
            // Handles messages coming from server to this client.
            // All comms using 'SPXWebRendererMessage' as a conduit with data object and
            // data.spxcmd as function identifier. Additional object values are payload.
            // console.log('SPXWebRendererMessage received (but doing nothing to it)', data)
        }); // socketMessage handler ended

        window.addEventListener('load',protocolCheck,false);

  </script>
</body>
</html>
